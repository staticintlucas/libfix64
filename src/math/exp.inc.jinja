{#- jinja2 template for math/exp.inc -#}

{{autogen_comment}}

{% set exp_frac_bits = 64 %}
{# Need one int bit to be able to store log2(e) which is >1 #}
{% set mul_frac_bits = 63 -%}

// Number fractional bits
#define EXP_FRAC_BITS {{exp_frac_bits}}
#define MUL_FRAC_BITS {{mul_frac_bits}}

{% set coefs = chebyshev_coefs["exp2m1"]() %}
static const uint64_t exp2m1_chebyshev_coefs[{{coefs | length}}] = {
    // clang-format off
{% for coef in coefs %}
    {{const(coef, frac_bits=exp_frac_bits, digits=16)}},
{% endfor %}
    // clang-format on
};
static const size_t exp2m1_chebyshev_coefs_len =
    sizeof(exp2m1_chebyshev_coefs) / sizeof(exp2m1_chebyshev_coefs[0]);

static const uint64_t exp_log2e_val = {{uconst(consts.log2e.val, frac_bits=mul_frac_bits)}};
static const uint64_t log_1_log2e_val = {{uconst(1 / consts.log2e.val, frac_bits=exp_frac_bits)}};
static const uint64_t log10_1_log2_10_val = {# 1 / log2(10) = ln(2) / ln(10)
    #}{{uconst(consts.ln2.val / consts.ln10.val, frac_bits=exp_frac_bits)}};
