{#- jinja2 template for math/trig.inc -#}

{{autogen_comment}}

{% set trig_frac_bits = 62 -%}

// Number fractional bits
#define TRIG_FRAC_BITS {{trig_frac_bits}}

// Use this instead of FIX64_2_PI for accuracy
#define TRIG_4_PI      {{const(4 / consts.pi.val, frac_bits=trig_frac_bits)}} // Q1.62
#define TRIG_8_PI      {{uconst(8 / consts.pi.val, frac_bits=trig_frac_bits)}} // UQ2.62
#define TRIG_ONE       {{const(1, frac_bits=trig_frac_bits)}} // UQ1.62

{% for func in ["sin", "cos", "tan"] %}
static int64_t chebyshev_{{func}}_impl(int64_t value) {
    // Coefficients for the chebyshev series
{% set coefs = poly[func].coefs() %}
    static const int64_t coefs[{{coefs | length}}] = {
        // clang-format off
{% for coef in coefs %}
        {{const(coef, frac_bits=trig_frac_bits, digits=16)}},
{% endfor %}
        // clang-format on
    };

    // Intermediate calculations are done with a UQ0.64 to avoid bit shifts
    uint64_t uval = (uint64_t)value << (64 - TRIG_FRAC_BITS);

    int64_t sum = coefs[0]; // Q1.62
    for (size_t i = 1; i < sizeof(coefs) / sizeof(coefs[0]); i++) {
        // Note: assumes 64 fractional bits in uval
        fix64_impl_mul_i64_u64_i128(sum, uval, &sum); // Q1.126 => take upper half for Q1.62
        sum += coefs[i]; // Q1.62
    }

    return sum; // Q1.62
}

{% endfor -%}
