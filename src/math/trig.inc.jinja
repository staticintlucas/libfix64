{#- jinja2 template for math/trig.inc -#}

{{autogen_comment}}

{% set cheby_frac_bits = 62 -%}

// Number fractional bits
#define CHEBYSHEV_FRAC_BITS {{cheby_frac_bits}}

// Use this instead of FIX64_2_PI for accuracy
#define CHEBYSHEV_2_PI      {{const(2 / consts.pi.val, frac_bits=cheby_frac_bits)}}

{% for func in ["sin", "cos", "tan"] %}
static int64_t chebyshev_{{func}}_impl(int64_t value) {
    // Coefficients for the chebyshev series
{% set coefs = chebyshev_coefs[func]() %}
    static const int64_t coefs[{{coefs | length}}] = {
        // clang-format off
{% for coef in coefs %}
        {{const(coef, frac_bits=cheby_frac_bits, digits=16)}},
{% endfor %}
        // clang-format on
    };

    int64_t sum = coefs[sizeof(coefs) / sizeof(coefs[0]) - 1]; // Q1.62
    for (size_t i = sizeof(coefs) / sizeof(coefs[0]) - 1; i-- > 0;) {
        int64_t hi;
        uint64_t lo = fix64_impl_mul_i64_i128(sum, value, &hi); // Q3.124
        sum = (hi << (64 - CHEBYSHEV_FRAC_BITS)) | (lo >> CHEBYSHEV_FRAC_BITS); // Q1.62
        sum += coefs[i]; // Q1.62
    }

    return sum; // Q1.62
}

{% endfor -%}
