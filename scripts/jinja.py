#!/usr/bin/env python3

from . import consts

import jinja2 as _jinja2
from mpmath import mp as _mp

TYPE = "fix64"
REPR = "int64"
FRAC_BITS = 32
CHEBYSHEV_FRAC_BITS = 62

def repr_const(value, base="x", digits=1):
    base = base.lower()
    if base not in "dx":
        raise ValueError("Unsupported base")
    if base == "x":
        digits += 2 # Add 2 for the 0x
    return f"{REPR.upper()}_C({value:#0{digits}{base}})"

def const(value, base="x", digits=1):
    repr = int(_mp.nint(value * (1 << FRAC_BITS)))
    return repr_const(repr, base, digits)

def cheby_const(value, base="x", digits=1):
    repr = int(_mp.nint(value * (1 << CHEBYSHEV_FRAC_BITS)))
    return repr_const(repr, base, digits)

def render(filename):
    args = {
        "autogen_comment": "// autogenerated file - edits to this file will be lost",
        "type": TYPE,
        "const": const,
        "int_bits": (64 - 1 - FRAC_BITS), # -1 for sign bit
        "frac_bits": FRAC_BITS,
        "repr": {
            "type": REPR,
            "const": repr_const,
        },
        "float_types": {
            "float": {"short": "flt", "suffix": "f"},
            "double": {"short": "dbl", "suffix": ""},
            "long double": {"short": "ldbl", "suffix": "l"},
        },
        "nums": {
            "zero": consts.zero,
            "one": consts.one,
            "half": consts.half,
            "two": consts.two,
        },
        "consts": {
            "e": consts.e,
            "log_2(e)": consts.log2e,
            "log_10(e)": consts.log10e,
            "ln(2)": consts.ln2,
            "ln(10)": consts.ln10,
            "pi": consts.pi,
            "pi/2": consts.pi_2,
            "pi/4": consts.pi_4,
            "1/pi": consts.c_1_pi,
            "2/pi": consts.c_2_pi,
            "2/sqrt(pi)": consts.c_2_sqrtpi,
            "sqrt(2)": consts.sqrt2,
            "sqrt(1/2)": consts.sqrt1_2,
        },
        "chebyshev": {
            "frac_bits": CHEBYSHEV_FRAC_BITS,
            "const": cheby_const,
            "sin": {
                "coefs": consts.chebyshev_coefs(_mp.sin, [-consts.pi/4, consts.pi/4], 12),
            },
            "cos": {
                "coefs": consts.chebyshev_coefs(_mp.cos, [-consts.pi/4, consts.pi/4], 12),
            },
            "tan": {
                "coefs": consts.chebyshev_coefs(_mp.tan, [-consts.pi/4, consts.pi/4], 26),
            }
        }
    }

    env = _jinja2.Environment(
        loader=_jinja2.FileSystemLoader('src'),
        lstrip_blocks=True,
        trim_blocks=True,
        undefined=_jinja2.StrictUndefined)
    template = env.get_template(filename.name)

    return template.render(args)
