#!/usr/bin/env python3

import consts

from decimal import Decimal
import jinja2
from pathlib import Path
import sys

try:
    filename = Path(sys.argv[1])
except IndexError:
    print(f"Usage: {sys.argv[0]} <jinja file>")
    sys.exit(1)

FRAC_BITS = 32

CORDIC_NUM_ITER = 40 # will be off by 1 LSB only ~0.125 % of the time, or 1 in every 800 values
CORDIC_FRAC_BITS = 62

args = {
    "autogen_comment": "// autogenerated file - edits to this file will be lost",
    "type": "fix64_t",
    "prefix": "fix64",
    "const": lambda x, n=1: f"INT64_C(0x{int(round(x * (1 << FRAC_BITS))):0{n}x})",
    "macro": "FIX64",
    "int_bits": (64 - 1 - FRAC_BITS), # -1 for sign bit
    "frac_bits": FRAC_BITS,
    "repr": {
        "name": "int64_t",
        "prefix": "int64",
        "const": lambda x: f"INT64_C({x})",
        "max": "INT64_MAX",
        "min": "INT64_MIN",
    },
    "floats": {
        "float": {"prefix": "flt", "macro": "FLT", "suffix": "f"},
        "double": {"prefix": "dbl", "macro": "DBL", "suffix": ""},
        "long double": {"prefix": "ldbl", "macro": "LDBL", "suffix": "l"},
    },
    "nums": {
        "zero": {"string": "0", "value": Decimal(0)},
        "one": {"string": "1", "value": Decimal(1)},
        "half": {"string": "0.5", "value": Decimal(0.5)},
        "two": {"string": "2", "value": Decimal(2)},
    },
    "consts": {
        "e": {"string": "e", "value": consts.e},
        "log2e": {"string": "log_2(e)", "value": consts.log2e},
        "log10e": {"string": "log_10(e)", "value": consts.log10e},
        "ln2": {"string": "ln(2)", "value": consts.ln2},
        "ln10": {"string": "ln(10)", "value": consts.ln10},
        "pi": {"string": "pi", "value": consts.pi},
        "pi_2": {"string": "pi/2", "value": consts.pi_2},
        "pi_4": {"string": "pi/4", "value": consts.pi_4},
        "1_pi": {"string": "1/pi", "value": consts.c_1_pi},
        "2_pi": {"string": "2/pi", "value": consts.c_2_pi},
        "2_sqrtpi": {"string": "2/sqrt(pi)", "value": consts.c_2_sqrtpi},
        "sqrt2": {"string": "sqrt(2)", "value": consts.sqrt2},
        "sqrt1_2": {"string": "sqrt(1/2)", "value": consts.sqrt1_2},
    },
    "cordic": {
        "const": lambda x, n=1: f"INT64_C(0x{int(round(x * (1 << CORDIC_FRAC_BITS))):0{n}x})",
        "trig": {
            "num_iter": CORDIC_NUM_ITER,
            "k": consts.cordic_trig_k(CORDIC_NUM_ITER),
            "atans": [consts.cordic_trig_atan(i) for i in range(1, CORDIC_NUM_ITER + 1)],
            "frac_bits": CORDIC_FRAC_BITS,
        }
    },
}

env = jinja2.Environment(
    loader=jinja2.FileSystemLoader('src'),
    lstrip_blocks=True,
    trim_blocks=True,
    undefined=jinja2.StrictUndefined)
template = env.get_template(filename.name)

result = template.render(args)

print(result)
