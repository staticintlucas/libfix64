#!/usr/bin/env python3

from jinja2 import Environment, FileSystemLoader
from dataclasses import dataclass
import math
from typing import Callable

@dataclass
class FixedType:
    name: str
    prefix: str
    repr: str
    repr_prefix: str
    repr_min: str
    signed: bool
    int_bits: int # excludes sign bit
    frac_bits: int
    mul_type: str
@dataclass
class FloatType:
    name: str
    prefix: str
    suffix: str
@dataclass
class Constant:
    name: str
    string: str
    value: float

types = [
    FixedType(
        name="ufix64_t", prefix="ufix64", repr="uint64_t", repr_prefix="uint64",
        repr_min="UINT64_C(0)", signed=False, int_bits=32, frac_bits=32, mul_type="__uint128_t"),
    FixedType(
        name="fix64_t", prefix="fix64", repr="int64_t", repr_prefix="int64",
        repr_min="INT64_MIN", signed=True, int_bits=31, frac_bits=32, mul_type="__int128_t"),
]
floats = [
    FloatType(name="float", prefix="flt", suffix="f"),
    FloatType(name="double", prefix="dbl", suffix=""),
    FloatType(name="long double", prefix="ldbl", suffix="l"),
]
nums = [
    Constant(name="zero", string="0", value=0.0),
    Constant(name="one", string="1", value=1.0),
    Constant(name="half", string="0.5", value=0.5),
    Constant(name="two", string="2", value=2.0),
]
consts = [
    Constant(name="e", string="e", value=math.e),
    Constant(name="log2e", string="log_2(e)", value=math.log2(math.e)),
    Constant(name="log10e", string="log_10(e)", value=math.log10(math.e)),
    Constant(name="ln2", string="ln(2)", value=math.log(2)),
    Constant(name="ln10", string="ln(10)", value=math.log(10)),
    Constant(name="pi", string="pi", value=math.pi),
    Constant(name="pi_2", string="pi/2", value=(math.pi / 2)),
    Constant(name="pi_4", string="pi/4", value=(math.pi / 4)),
    Constant(name="1_pi", string="1/pi", value=(1 / math.pi)),
    Constant(name="2_pi", string="2/pi", value=(2 / math.pi)),
    Constant(name="2_sqrtpi", string="2/sqrt(pi)", value=(2 / math.sqrt(math.pi))),
    Constant(name="sqrt2", string="sqrt(2)", value=math.sqrt(2)),
    Constant(name="sqrt1_2", string="sqrt(1/2)", value=(math.sqrt(2) / 2)),
]

env = Environment(loader=FileSystemLoader('src'), trim_blocks=True, lstrip_blocks=True)
template = env.get_template("fix64.h.jinja")
template.globals.update({"tofix": lambda flt, frac_bits: int(round(flt * (1 << frac_bits)))})

result = template.render(
    header_comment="// autogenerated header - edits to this file will be lost",
    types=types,
    floats=floats,
    nums=nums,
    consts=consts,
)

with open("build/jinja/fix64.h", "w") as f:
    f.write(result)
