#!/usr/bin/env python3

from functools import reduce
from jinja2 import Environment, FileSystemLoader
import math
from operator import mul
from pathlib import Path
import sys

try:
    filename = Path(sys.argv[1])
except IndexError:
    print(f"Usage: {sys.argv[0]} <jinja file>")
    sys.exit(1)

FRAC_BITS = 32

CORDIC_NUM_ITER = 32
CORDIC_FRAC_BITS = 62

args = {
    "autogen_comment": "// autogenerated file - edits to this file will be lost",
    "types": [
        {
            "name": "ufix64_t", "prefix": "ufix64", "repr": "uint64_t", "repr_prefix": "uint64",
            "repr_max": "UINT64_MAX", "repr_min": "UINT64_C(0)", "signed": False,
            "int_bits": (64 - FRAC_BITS), "frac_bits": FRAC_BITS, "mul_type": "__uint128_t"
        },
        {
            "name": "fix64_t", "prefix": "fix64", "repr": "int64_t", "repr_prefix": "int64",
            "repr_max": "INT64_MAX", "repr_min": "INT64_MIN", "signed": True,
            "int_bits": (63 - FRAC_BITS), "frac_bits": FRAC_BITS, "mul_type": "__int128_t"
        },
    ],
    "floats": [
        {"name": "float", "prefix": "flt", "suffix": "f"},
        {"name": "double", "prefix": "dbl", "suffix": ""},
        {"name": "long double", "prefix": "ldbl", "suffix": "l"},
    ],
    "nums": {
        "zero": {"string": "0", "value": 0.0},
        "one": {"string": "1", "value": 1.0},
        "half": {"string": "0.5", "value": 0.5},
        "two": {"string": "2", "value": 2.0},
    },
    "consts": {
        "e": {"string": "e", "value": math.e},
        "log2e": {"string": "log_2(e)", "value": math.log2(math.e)},
        "log10e": {"string": "log_10(e)", "value": math.log10(math.e)},
        "ln2": {"string": "ln(2)", "value": math.log(2)},
        "ln10": {"string": "ln(10)", "value": math.log(10)},
        "pi": {"string": "pi", "value": math.pi},
        "pi_2": {"string": "pi/2", "value": (math.pi / 2)},
        "pi_4": {"string": "pi/4", "value": (math.pi / 4)},
        "1_pi": {"string": "1/pi", "value": (1 / math.pi)},
        "2_pi": {"string": "2/pi", "value": (2 / math.pi)},
        "2_sqrtpi": {"string": "2/sqrt(pi)", "value": (2 / math.sqrt(math.pi))},
        "sqrt2": {"string": "sqrt(2)", "value": math.sqrt(2)},
        "sqrt1_2": {"string": "sqrt(1/2)", "value": (math.sqrt(2) / 2)},
    },
    "cordic": {
        "trig": {
            "num_iter": CORDIC_NUM_ITER,
            "k": reduce(mul, (1 / math.sqrt(1 + 2**(-2*i)) for i in range(CORDIC_NUM_ITER)), 1),
            "atans": [math.atan(2**(-i)) / (math.pi / 2) for i in range(1, CORDIC_NUM_ITER + 1)],
            "frac_bits": CORDIC_FRAC_BITS,
        }
    },
}

env = Environment(loader=FileSystemLoader('src'), trim_blocks=True, lstrip_blocks=True)
template = env.get_template(filename.name)
template.globals.update({
    "tofix": lambda flt: int(round(flt * (1 << FRAC_BITS))),
    "tofixcordic": lambda flt: int(round(flt * (1 << CORDIC_FRAC_BITS))),
})

result = template.render(args)

print(result)
