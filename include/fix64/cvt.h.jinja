{#- jinja2 template for fix64/cvt.h -#}

{{autogen_comment}}

#pragma once

#include <limits.h>
#include <math.h>
#include <stdint.h>

#include "fix64.h"

// _Generic is only available since C11
#if __STDC_VERSION__ >= 201112L
/// Generic macro to convert a floating point type to fix64_t
#define fix64_from(x) _Generic((x), \
{% for type, i in ints.items() %}
        {{type}}: fix64_from_{{i.short}}, \
{% endfor %}
{% for type, f in floats.items() %}
        {{type}}: fix64_from_{{f.short}}, \
{% endfor %}
    )(x)
#endif

{% for type, i in ints.items() %}
/// Converts a fix64_t to an {{type}}
///
/// @param value the fix64_t value to convert
/// @return converted {{type}} value
static inline {{type}} fix64_to_{{i.short}}(fix64_t value) {
    int64_t result = (value.repr >> FIX64_FRAC_BITS);
    if (result > {{i.short | upper}}_MAX) {
        result = {{i.short | upper}}_MAX;
    }
{%- if i.signed %} {# -#}
    else if (result < {{i.short | upper}}_MIN) {
        result = {{i.short | upper}}_MIN;
    }
{%- endif +%}
    return result;
}

{% endfor -%}

{% for type, i in ints.items() %}
/// Converts an {{type}} to a fix64_t
///
/// @param value the {{type}} value to convert
/// @return converted fix64_t value
static inline fix64_t fix64_from_{{i.short}}({{type}} value) {
    fix64_t result;
    if (value > (FIX64_MAX.repr >> FIX64_FRAC_BITS)) {
        result = FIX64_MAX;
    }
{%- if i.signed %} {# -#}
    else if (value < (FIX64_MIN.repr >> FIX64_FRAC_BITS)) {
        result = FIX64_MIN;
    }
{%- endif +%}
    else {
        result = (fix64_t){ (int64_t)value << FIX64_FRAC_BITS };
    }
    return result;
}

{% endfor -%}

{% for type, f in floats.items() %}
/// Converts a fix64_t to a {{type}}
///
/// @param value the fix64_t value to convert
/// @return converted {{type}} value
static inline {{type}} fix64_to_{{f.short}}(fix64_t value) {
    return (({{type}})(value.repr) / ({{type}})(INT64_C(1) << FIX64_FRAC_BITS));
}

{% endfor -%}

// Note: for (sort-of) efficient float to fixed saturating conversions, we rely on integer limits
// converted to float and rounded towards zero. Unfortunately compilers don't have good support for
// fesetround (GCC for example will reorder fesetround calls relative to float casts). Instead the
// limits are calculated by zeroing the LSBs of the integral max so that has as many significant
// bits as the floating point mantissa. This way the exact value is preserved when casting.

{% for type, f in floats.items() %}
/// Converts a {{type}} to fix64_t
///
/// Saturates if input is outside of fix64_t's range. Undefined behaviour if input is NaN
///
/// @param value the {{type}} value to convert
/// @return converted fix64_t value
static inline fix64_t fix64_from_{{f.short}}({{type}} value) {
#if {{f.short | upper}}_MANT_DIG >= FIX64_BITS
    static const {{type}} max = INT64_MAX;
    static const {{type}} min = INT64_MIN;
#else
    static const {{type}} max = (INT64_MAX & ~((INT64_C(1) << {#
        #}(FIX64_BITS - {{f.short | upper}}_MANT_DIG)) - 1));
    static const {{type}} min = (INT64_MIN & ~((INT64_C(1) << {#
        #}(FIX64_BITS - {{f.short | upper}}_MANT_DIG)) - 1));
#endif
{% if type == "long double" %}
    // Note: clang fails to optimise out call to exp2l, so we use a bit shift instead. A long
    // double is more than large enough to store the result so the compiler doesn't complain
    // like it does with float (even though float can accurately hold any power of 2 too).
    value = value * (INT64_C(1) << FIX64_FRAC_BITS);
{% else %}
    value = value * exp2{{f.suffix}}(FIX64_FRAC_BITS);
{% endif %}
    value += copysign{{f.suffix}}(0.5{{f.suffix}}, value);

    int64_t repr;
    if (FIX64_UNLIKELY(value > max)) {
        repr = INT64_MAX;
    } else if (FIX64_UNLIKELY(value < min)) {
        repr = INT64_MIN;
    } else {
        repr = (int64_t)value;
    }

    return (fix64_t){repr};
}

{% endfor -%}
